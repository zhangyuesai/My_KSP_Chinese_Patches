// ------ LifeSupportResources/Snacks.cfg ------
@RESOURCE_DEFINITION[Snacks]:NEEDS[Snacks]:AFTER[Snacks]
{
    displayName = #LOC_Snacks_resource_snacks //Snacks
}
@RESOURCE_DEFINITION[Soil]:NEEDS[Snacks]:AFTER[Snacks]
{
    displayName = #LOC_Snacks_resource_soil //Soil
}
@SNACKS_RESOURCE_PROCESSOR[Snacks!]:NEEDS[Snacks]:AFTER[Snacks]
{
    @OUTCOME[FaintPenalty]
    {
        @playerMessage = #LOC_Snacks_outcome_snacks_faintPenalty_playerMessage //faints from a lack of Snacks!
    }
    @OUTCOME[DeathPenalty]
    {
        @playerMessage = #LOC_Snacks_outcome_snacks_deathPenalty_playerMessage //has died from a lack of Snacks!
    }
}
@SNACKS_EVA_RESOURCE:HAS[#resourceName[Snacks]]:NEEDS[Snacks]:AFTER[Snacks]
{
    @warningMessage = #LOC_Snacks_evaResource_Snack_warningMessage //Warning: The supply of Snacks has dropped below minimum safetly levels.
}
@SNACKS_EVENT[8badf00d]:NEEDS[Snacks]:AFTER[Snacks]
{
    @playerMessage = #LOC_Snacks_event_badSnacks_playerMessage //<<KerbalName>> ate some bad snacks and has a tummy ache!
}
@SNACKS_EVENT[hangry]:NEEDS[Snacks]:AFTER[Snacks]
{
    @playerMessage = #LOC_Snacks_event_hangry_playerMessage //<<KerbalName>> got the munchies and ate some Snacks!
}


// ------ LifeSupportResources/Air.cfg ------
@SNACKS_RESOURCE_INTRO[Air]:NEEDS[SnacksFreshAir]:AFTER[Snacks]
{
    @title = #LOC_Snacks_resourceIntro_air_title //Air
    @description = #LOC_Snacks_resourceIntro_air_descrption //This addon demonstrates how to add a new life support resource that can be tracked and simulated by Snacks. It introduces two new life support resources to contend with: Fresh Air, and Stale Air. <br>Kerbals need Fresh Air to breathe in addition to Snacks to eat. As they exhale, Fresh Air becomes Stale Air. If they run out of Fresh Air, they'll faint and eventually die. You can think of Fresh Air as an immediate concern with Snacks being a longer term issue. <br>All the stock crew cabins have Air Scrubber converters, and the stock ISRU parts can create Fresh Air from Oxidizer. Other mods may provide different converters as well.
}
@RESOURCE_DEFINITION[FreshAir]:NEEDS[SnacksFreshAir]:AFTER[snacks]
{
    @displayName = #LOC_Snacks_resource_freshAir //Fresh Air
}
@RESOURCE_DEFINITION[StaleAir]:NEEDS[SnacksFreshAir]:AFTER[snacks]
{
    @displayName = #LOC_Snacks_resource_staleAir //Stale Air
}
@STORAGE_TEMPLATE[Air]:NEEDS[SnacksFreshAir]:AFTER[snacks]
{
    @description = #LOC_Snacks_storageTemplate_air_description //Fresh Air! in contrast to Atmosphere, is especially described as the storable, breathable kind that occurs on Kerbin. In the case of this kit, Air! is pressurized too. Be very careful. It tends to want to want to get into space much more than kerbals do, and may get quite the help if BARIS is around.
}
@STORAGE_TEMPLATE[AirCombo]:NEEDS[SnacksFreshAir]:AFTER[snacks]
{
    @description = #LOC_Snacks_storageTemplate_airCombo_description //This kit holds much needed Fresh Air but also an equal portion of Stale Air. Try not to hyperventilate.
}
@STORAGE_TEMPLATE[StaleAir]:NEEDS[SnacksFreshAir]:AFTER[snacks]
{
    @description = #LOC_Snacks_storageTemplate_staleAir_description //Stale Air! is what happens when kerbals breathe, and also when they eat snacks that are rich in certain components that may not agree with each peculiar kerbal. This kit meets the need to sift and contain these kinds of air... Venting it into space is a worse idea than keeping it around.
}
@SNACKS_EVA_RESOURCE[FreshAir]:NEEDS[SnacksFreshAir]:AFTER[snacks]
{
    @warningMessage = #LOC_Snacks_evaResource_FreshAir_warningMessage //Warning: The supply of Fresh Air has dropped below minimum safetly levels.
}
@SNACKS_RESOURCE_PROCESSOR[Air]:NEEDS[SnacksFreshAir]:AFTER[Snacks]
{
    @OUTCOME[FaintPenalty]
    {
        @playerMessage = #LOC_Snacks_outcome_air_faintPenalty_playerMessage //is gasping for air and faints!
    }
    @OUTCOME[DeathPenalty]
    {
        @playerMessage = #LOC_Snacks_outcome_air_deathPenalty_playerMessage //has suffocated to death!
    }
}
@PART[ISRU,MiniISRU]:NEEDS[SnacksFreshAir]:AFTER[Snacks]
{
    @MODULE:HAS[#ConverterName[Air?Maker]]
    {
        @ConverterName = #LOC_Snacks_module_airMaker_name //Air Maker
        @StartActionName = #LOC_Snacks_module_airMaker_start //Start Air Maker
        @StopActionName = #LOC_Snacks_module_airMaker_stop //Stop Air Maker
    }
}
@PART[crewCabin,mk2CrewCabin,MK1CrewCabin,mk3CrewCabin]:NEEDS[SnacksFreshAir]:AFTER[Snacks]
{
    @MODULE:HAS[#ConverterName[Air?Scrubber]]
    {
        @ConverterName = #LOC_Snacks_module_airScrubber_name //Air Scrubber
        @StartActionName = #LOC_Snacks_module_airScrubber_start //Start Air Scrubber
        @StopActionName = #LOC_Snacks_module_airScrubber_stop //Stop Air Scrubber
    }
}
@PART[radialSnackTin,snackTin500,snackTin1500,snackTin4500]:NEEDS[SnacksFreshAir]:AFTER[Snacks]
{
    @MODULE[SnacksResourceSwitcher]
    {
        @OPTION[FreshAir]
        {
            @name = #LOC_Snacks_resource_freshAir //FreshAir
        }
        @OPTION[StaleAir]
        {
            @name = #LOC_Snacks_resource_staleAir //StaleAir
        }
        @OPTION[Fresh?and?Stale?Air]
        {
            @name = #LOC_Snacks_resource_freshAndStaleAir //Fresh and Stale Air
        }
    }
}


// ------ LifeSupportResources/Stress.cfg ------
@SNACKS_RESOURCE_INTRO[Stress]:NEEDS[SnacksStress]:AFTER[Snacks]
{
    @title = #LOC_Snacks_resourceIntro_stress_title //Stress!
    @description = #LOC_Snacks_resourceIntro_stress_description //This addon introduces roster resources in the form of Stress. Unlike resources tied to a vessel, roster resources are characteristics of the kerbals. The SnacksConverter can convert roster resources- the Entertainment Center can reduce Stress, for instance, and SNACKS_RESOURCE_PROCESSOR config can work with roster resources as well. <br>The addon also introduces the Snacks event system. Events let you apply different outcomes based on one or more preconditions. They let you spice up your game and give it more personality.<br>As for Stress, kerbals don't like being confined to tiny capsules for long journeys, and they accumulate Stress daily. Additional events, like getting Sick, running out of Snacks, and gasping for Fresh Air cause additional Stress. <br>The vessel's crew capacity and a kerbal's experience level affect how much Stress they can take. Once they hit their max, they are Stressed Out and will no longer work. They are <b><i>NOT</i></b> Tourists! Engineers, Pilots, Scientists, and the like simply lose their skills. They can recover in the various stock crew cabins with a working Entertainment Center, but while recovering they don't use their skills either. Once a kerbal's Stress is below their max and you either turn off the Entertainment Center or they leave the cabin, they'll return to work.
}
@SNACKS_ROSTER_RESOURCE:HAS[#resourceName[Stress]]:NEEDS[SnacksStress]:AFTER[Snacks]
{
    @displayName = #LOC_Snacks_resource_stress //Stress
}
@SNACKS_ROSTER_RESOURCE:HAS[#resourceName[DaysSick]]:NEEDS[SnacksStress]:AFTER[Snacks]
{
    @displayName = #LOC_Snacks_resource_coldRecovery //Cold Recovery
    @statusFormat = #LOC_Snacks_resource_coldRecovery_statusFormat//<<amount>> days
}
@SNACKS_EVENT[catchACold]:NEEDS[SnacksStress]:AFTER[Snacks]
{
    @playerMessage = #LOC_Snacks_event_catchACold_playerMessage //<<KerbalName>> caught a cold!
}
@SNACKS_EVENT[infectCrewMates]:NEEDS[SnacksStress]:AFTER[Snacks]
{
    @OUTCOME[ProduceResource]
    {
        @playerMessage = #LOC_Snacks_event_catchACold_playerMessage //<<KerbalName>> caught a cold!
    }
}
@PART[crewCabin,mk2CrewCabin,MK1CrewCabin,mk3CrewCabin]:NEEDS[SnacksStress]:AFTER[Snacks]
{
    @MODULE:HAS[#ConverterName[Entertainment?Center]]
    {
        @ConverterName = #LOC_Snacks_module_entertainmentCenter_name //Entertainment Center
        @StartActionName = #LOC_Snacks_module_entertainmentCenter_start //Start Entertainment
        @StopActionName = #LOC_Snacks_module_entertainmentCenter_stop //Stop Entertainment
    }
}
@PART[cupola]:NEEDS[SnacksStress]:AFTER[Snacks]
{
    @MODULE:HAS[#ConverterName[Stargazing]]
    {
        @ConverterName = #LOC_Snacks_module_stargazing_name //Stargazing
        @StartActionName = #LOC_Snacks_module_stargazing_start //Start Stargazing
        @StopActionName = #LOC_Snacks_module_stargazing_stop //Stop Stargazing
    }
}


// ------ LifeSupportResources/Hydrazine.cfg ------
@SNACKS_RESOURCE_INTRO[Hydrazine]:NEEDS[Snacks]:AFTER[Snacks]
{
    @title = #LOC_Snacks_resourceIntro_hydrazine_title //Hydrazine!
    @description = #LOC_Snacks_resourceIntro_hydrazine_description //This addon introduces roster resources in the form of Stress. Unlike resources tied to a vessel, roster resources are characteristics of the kerbals. The SnacksConverter can convert roster resources- the Entertainment Center can reduce Stress, for instance, and SNACKS_RESOURCE_PROCESSOR config can work with roster resources as well. <br>The addon also introduces the Snacks event system. Events let you apply different outcomes based on one or more preconditions. They let you spice up your game and give it more personality.<br>As for Stress, kerbals don't like being confined to tiny capsules for long journeys, and they accumulate Stress daily. Additional events, like getting Sick, running out of Snacks, and gasping for Fresh Air cause additional Stress. <br>The vessel's crew capacity and a kerbal's experience level affect how much Stress they can take. Once they hit their max, they are Stressed Out and will no longer work. They are <b><i>NOT</i></b> Tourists! Engineers, Pilots, Scientists, and the like simply lose their skills. They can recover in the various stock crew cabins with a working Entertainment Center, but while recovering they don't use their skills either. Once a kerbal's Stress is below their max and you either turn off the Entertainment Center or they leave the cabin, they'll return to work.
}
@RESOURCE_DEFINITION[HydrazineVodka]:NEEDS[Snacks]:AFTER[Snacks]
{
    @displayName = #LOC_Snacks_resource_hydrazine //"Hydrazine"
}
@PART[radialSnackTin]:NEEDS[Snacks]:AFTER[Snacks]
{
    @MODULE[SnacksResourceSwitcher]
    {
        @OPTION[Hydrazine]
        {
            @name = #LOC_Snacks_resource_hydrazine //Hydrazine
        }
    }
}
@SNACKS_EVENT[drankTooMuch]:NEEDS[Snacks]:AFTER[Snacks]
{
    @OUTCOME[FaintPenalty]
    {
        @playerMessage = #LOC_Snacks_outcome_hydrazine_faintPenalty_playerMessage //passes out from drinking too much!
    }
}
@PART[Large_Crewed_Lab]:NEEDS[Snacks]:AFTER[Snacks]
{
    @MODULE:HAS[#ConverterName[Distillery]]
    {
        @ConverterName = #LOC_Snacks_module_distillery_name //Distillery
        @StartActionName = #LOC_Snacks_module_distillery_start //Start Distillery
        @StopActionName = #LOC_Snacks_module_distillery_stop //Stop Distillery
    }
}


// ------ ModuleManagerPatches/MM_Stock.cfg ------
@PART[Large_Crewed_Lab]:NEEDS[Snacks]:AFTER[Snacks]
{
    @MODULE:HAS[#ConverterName[Snack?Processor]]
    {
        @ConverterName = #LOC_Snacks_module_snackProcessor_name //Snack Processor
        @StartActionName = #LOC_Snacks_module_snackProcessor_start //Start Snack Processor
        @StopActionName = #LOC_Snacks_module_snackProcessor_stop //Stop Snack Processor
    }
}
@PART[crewCabin,mk3Cockpit_Shuttle,mk2CrewCabin]:NEEDS[Snacks]:AFTER[Snacks]
{
    @MODULE:HAS[#ConverterName[Soil?Recycler]]
    {
        @ConverterName = #LOC_Snacks_module_soilRecycler_name //Soil Recycler
        @StartActionName = #LOC_Snacks_module_soilRecycler_start //Start Soil Recycler
        @StopActionName = #LOC_Snacks_module_soilRecycler_stop //Stop Soil Recycler
    }
}

// ------ Parts/Payload/*.cfg ------
@PART[radialSnackTin]:NEEDS[Snacks]:AFTER[Snacks]
{
    @title = #LOC_Snacks_part_radialSnackTin_title //Radial Snack Tin
    @description = #LOC_Snacks_part_radialSnackTin_description //This tank holds a moderate amount of snacks for your life support needs.
}
@PART[snackTin500]:NEEDS[Snacks]:AFTER[Snacks]
{
    @title = #LOC_Snacks_part_snackTin500_title //S-500 Snack Tin
    @description = #LOC_Snacks_part_snackTin500_description //The adorable S-500 Snack Tin is perfect for extended excursions into space or for small supply runs. 
}
@PART[snackTin1500]:NEEDS[Snacks]:AFTER[Snacks]
{
    @title = #LOC_Snacks_part_snackTin1500_title //S-1500 Snack Tin
    @description = #LOC_Snacks_part_snackTin1500_description //The S-1500 is just the right size for even more extended stays
}
@PART[snackTin4500]:NEEDS[Snacks]:AFTER[Snacks]
{
    @title = #LOC_Snacks_part_snackTin4500_title //S-4500 Snack Tin
    @description = #LOC_Snacks_part_snackTin4500_description //The S-4500 contains a huge number of snacks for those wild parties.
}
@PART[radialSnackTin,snackTin500,snackTin1500,snackTin4500]:NEEDS[Snacks]:AFTER[Snacks]
{
    @manufacturer = #autoLOC_501627 //Jebediah Kerman's Junkyard and Spacecraft Parts Co
    @MODULE[SnacksResourceSwitcher]
    {
        @OPTION[Snacks]
        {
            @name = #LOC_Snacks_resource_snacks //Snacks
        }
        @OPTION[Soil]
        {
            @name = #LOC_Snacks_resource_soil //Soil
        }
        @OPTION[Snacks?and?Soil]
        {
            @name = #LOC_Snacks_resource_snackAndSoil //Snacks and Soil
        }
    }
}


// ------ Parts/Utility/wbiOxiumCandle/cfg ------
@RESOURCE_DEFINITION[SOCSFuel]:NEEDS[SnacksFreshAir]:AFTER[Snacks]
{
    @displayName = #LOC_Snacks_resource_socsFuel //SOCS Fuel
}
@PART[wbiOxiumCandle]:NEEDS[SnacksFreshAir]:AFTER[Snacks]
{
    @title = #LOC_Snacks_part_wbiOxiumCandle_title //Solid Oxium Candle System (SOCS)
    @manufacturer = #LOC_Snacks_part_wbiOxiumCandle_manufacturer //ACME Corporation
    @description = #LOC_Snacks_part_wbiOxiumCandle_description //This disposable device burns a chemical compound to produce fresh air. It also generates heat. Once started it cannot be stopped. And it might explode. Astronauts repeatedly claim that the chemical reaction smells like burnt dirty socks despite assurances to the contrary.
    @tags = #LOC_Snacks_part_wbiOxiumCandle_tags //cck-lifesupport snacks wile coyote bomb oof ohlawd fuse not this sh-- again stress birb
    @MODULE:HAS[#ConverterName[SOCS]]
    {
        @ConverterName = #LOC_Snacks_module_socs_name //SOCS
        @StartActionName = #LOC_Snacks_module_socs_start //Ignite Oxium Candle
        @StopActionName = #LOC_Snacks_module_socs_stop //Extinguish Oxium Candle (g'luck)
        @ToggleActionName = #LOC_Snacks_module_socs_toggleActionName //Toggle Oxium Candle (g'luck)
        @criticalSuccessMessage = #LOC_Snacks_module_socs_criticalSuccessMessage //Candle ignited. Hopefully it won't explode...
        @successMessage = #LOC_Snacks_module_socs_successMessage //Candle ignited. Hopefully it won't explode...
        @failMessage = #LOC_Snacks_module_socs_failMessage //Candle ignited. Hopefully it won't explode...
        @criticalFailMessage = #LOC_Snacks_module_socs_criticalFailMessage //Candle exploded!
    }
}